참석자 1 
모드에 따른 시행계획 변화 이거를 올려드렸어요. 
올려드렸으니까 서트로드 했을 때 올로드 했을 때 실행률이 달라진 것을 확인하고 거기서 그치지 않고 뭘 할 거냐면 아까 말씀드린 것처럼 퍼트 로드로

참석자 1 
할 건데 제가 아까 옵티마저 모드에 따라서 실행기가 바뀌는 거를 보여드렸지 않습니까 그거를 이제 직접 한번 해보실 거예요. 
해보시는데 아까 보여드린 거 이상에 하나를 더 할 겁니다. 
왜냐면 제가 말씀드린 것처럼 파라미터로 변경할 수 있지만 힌트로도 변경할 수 있다. 
그랬죠 그래서 여기다가 1백 파라미터를 파라미터로 할 때는요 발터 패션 셋

참석자 1 
오티마이저 보드
참석자 1 
여기 좀 보세요. 여기서 그가 퍼스트 로즈 일을 할 수도 있고 그죠 10을 할 수도 있고 100을 할 수도 있고 1천을 할 수도 있어요. 
근데 그거 외에는 안 돼요 일 10 11천만입니다. 
예를 들면 1천 일을 하겠다. 애라나요. 
밑에 보시면 아시겠지만 1112만 지원한다 이렇게 돼 있죠 근데 힌트로 할 때는 아무런 숫자도 다 인력 할 수 있어요.

참석자 1 
인제에다가 무슨 지 아시겠죠. 그러면 아까 보신 것처럼 처음에 여기다 10을 주면 전체 데이터 중에 10번을 가져올 때 기준으로 실행기를 만들어 달라 그런 거니까 인덱스를 해야겠죠. 
그죠 근데 이 배글로브 인디스 타고 그러면 이제 점점 숫자를 늘려갈수록 여기 칼리드라티가 같이 증가해요.

참석자 1 
큰일 날 때 뭔지 아시죠 건수도 먹을 수 있지 않습니다. 
그래서 저 하트 준 값만큼 할인 설피를 개선하고 그것을 기준으로 이들 할지 풋신할지를 결정하는 거예요. 
그럼 어떤 걸 볼 수 있냐면 숫자를 좀 이렇게 늘려가다 보면 어느 순간에 프로스캔으로 딱 바뀌는 순간이 있겠죠. 
그죠 그걸 찾는 거예요.
참석자 1 
그게 손익 점이에요. 그만큼의 건수를 처리하는 이상의 데이터를 처리할 때 옵티마저는 이 정도 것으면은 인덱스보다 스킨이 낫다고 생각하는 그 지점이 있다는 얘기죠 그래서 그것을 제일 먼저 찾으신 분께 제가 다음 주에 커피를 한잔 대접하는 걸로 하겠습니다. 
아시겠죠. 네 질문이 문제가 뭔지 이해 안 되시는 분 질문해 주세요. 
재밌는 실습이에요. 오킹하죠.
참석자 1 
시간이 없어지고 이런 걸 하는 이유는 이런 걸 통해서 옵티마이저에 대한 이해가 높아지는 거예요. 
내가 사용하고 있는 옵티마이저 나를 대신해서 프로라 그램을 대신 작성해 주는 옵티마이저가 내부적으로 어떻게 작동하고 있는지에 대한 이해를 높이는 그런 실수 될

참석자 1 
잠깐만요 여러분들 흰 테이블을 각자 만들게 되면 각자 만들게 되면 이해 못 그래서

참석자 1 
뭐지 어떻게 하는 거죠. 케이크 파블리

참석자 1 
에드 원점 티 테이블로 하세요. 에드 원점 티테이블로 그래야지 똑같은 결과가 나올 거 아니야 그런데 각자 탭을 만드시게 되면 통계 정보가 살짝 다를 수 있어요. 
그러다 보니까 순위 분기점이 달라질 수 있겠죠. 
똑같은 탭을 바라보고 하기 위해서 t 탭을 만들지 마시고 제가 만들어놓은 tt을 이용하시면 되겠습니다. 
그래서 에드 점 t 그것을 여기다가 에드 점 치라고 쓰시면 돼요 에드 점 t

참석자 1 
네 권원도 드렸고 팀장님이 만들었으니까 그냥 티라고 하셔도 되는데 혹시 여러분들이 티 때을 미리 만들어놨으면 팀장님이 작성 하수도 아니 안 할 수 으니까 애들 때로 쉬라고 하겠습니다.

참석자 1 
그러면 네 올려주실 스크립트에서 인덱스 생성부터 하면 되네요. 
생선도 이미 돼 있죠 제 테이블에서 여러분 알 수 없으니까 생선 비미 제가 해놨거든요. 
나중에 돌아가서 하실 때는 다 하시고 지금은 청년 한번 주세요. 
충분 조금 제가 해놨어요. 해놨으니까 그냥 퍼스트 로즈 수치를 바꿔 가면서 우선 여기 있는 대로 올로즈 해보시고 퍼스트 로즈 해보시고 그다음에 힌트로 해보시고 그다음에 힌트를

참석자 1 
수치를 증가시켜가면서 어느 시점에 프로스캔 바뀌는지 이걸 확인하면 돼요

참석자 1 
그래서 에스트로 플레이스에서 하시게 되면 셋 오더 프레스 프레스 온니 이스플레이 이렇게 하시면 되고 굳이 에스크 플러스 쓰지 않으셔도 허리 박스라든지 오렌지나 이런 데서 하시게 되면 거기서 실행해 보는 기능이 있으니까 그걸 그냥

참석자 1 
4600 4946
참석자 1 
4945는 이제 타는데 4946을 넣는 순간

참석자 1 
이미 게임은 끝났으니까 편한 마음으로 다 해석해 보세요.

참석자 1 
실습하다가 뭐 재밌는 사실 발견한 거 없으세요. 
또는 질문
참석자 1 
오키마이즈에 대한 이해를 높이는 데 좀 도움이 되시지 않나요. 
그 이제 곧 이디스를 시작할 텐데 근데 이제 중요한 개념 중에 하나가 손익 분기점이에요. 
인덱스가 항상 좋은 게 아니다. 정량을 넘어서는 순간 오히려 풀0점만 못하다 이제 그 개념으로 했을 텐데 그 내용을 지금 기대 보고 계실 거예요.

참석자 1 
지금 보시는 것처럼 옵티마이즈는 일정량을 넘어서는 순간 즉 소유 품균형을 넘어서는 순간 냉정하게 프로스템을 바꿔버릴 거다 냉정하게

참석자 1 
그런데 그것은 어떻하지 판단이고 과연 우리 같은 사람 db에 같은 피가 개발자 입장에서 과연 4점 몇 건을 넘는 순간 비용이 더 높다고 해서 갑자기 코스를 갖게 되는 것인가에 대한 고민을 하게 되죠. 
우피마저는 이 sk의 시행수라든지 이런 걸 우려하지 않아요. 
단순히 기업만 보고 표시나 딱 바꿔버리는 거예요. 
그래서 나이가 나는 거죠. 사실 그 커리가 엄청 수용비보다 높은 커리거든요. 
수용비보다 높은 커리인데
참석자 1 
천만 권을 풀로 하나 소리 딱 바꿔버리는 거죠. 
사용자들이 엄청 많이 바꿔서 처리하면 돼요 장애가 나는 거 호시마에서 기준에 승점은 4몇 백 개지만 사람이 볼 때는 안 돼 450개가 아니고 5천 개가 아니고 만 개에 들어도 이 팔 된다 이런 판단을 보 할 수 있는 거죠. 
사람은 정상적인 판단을 하는 거니까 실행 환경이라든지 실행 횟수라든지 이런 판단까지 같이 하는 거기 때문에

참석자 1 
옵티마자의 판단과 사람의 판단은 다를 수도 있다. 
오티마저는 아주 기계적인 판단을 하거든요. 
기계적인 판단 그 쿼리가 어느 시점부터 아이가 더 많이 늘어나는 건 알지만 도대체 그 커리가 얼마큼 많이 실현되는지까지 고려를 못하니까 함부로 감히 까지 가까워 걸리는 건데 우리 팀원들은 그보다 더 많은 정보를 바탕으로 판단을 하게 되는 거죠.

참석자 1 
옵티마즈가 얼마나 정교한지를 잘 알고 나면 그냥 마이크도 좋고 마리아도 좋고 포스트 그래도 좋다고 하는데 이건 아니구나 따라오려면 한참 멀었구나 이런 생각을 안 할 수가 없습니다. 
그냥 단순한 커리들이야 처리할 수 있겠지만 조금만 복잡해지면 그 처리가 안 되는 거

참석자 1 
오라클이 한물 갔다 하는데 제가 시간 동안 제가 주가 세트 하나 보여드려고 이게 애플의 주가 세트입니다. 
애플 굉장히 최근에 접종 생활을 했죠. 
오라클은 안 중에도 없어요. 사람들이 같은 기간에 오라클 갑니다. 
더 가팔라요 물론 이게 데이터베이스 때문만의 그런 건 아니겠죠. 
러브
참석자 1 
오라클은 아직도 건재하다 국가를 보면서 사람들은 오라클 한번 갔다 고 말게 물 물 많이 해 오라클 다른 소회라든지 다른 기에 의해서 이제 더 이상 마케시를 유지하기가 힘들 것이다. 
이런 얘기들을 함으로 하는데 오라클은 굉장히 잘 나오고 있습니다. 
지금 이 순간에 예전에 dw 관련된 기기들이 다양하게 이렇게 사이비스 아이q라든지 많은 기기들이 있었거든요.

참석자 1 
거의 오라클이 상승해 버렸어요. 지금 이쪽에 그는 오라클에서 데이타 쪽

참석자 1 
라 말할 것도 없이 오라클의 유일한 형이 있어요. 
뭘까요. 비싸다. 오라클이 안 좋아서 마이스크로 가고 오라클이 안 좋아서 마리아로 가고 코스트 가는 게 아니고 좋은 건 누구나 다 인정 누구나 다 인정 근데 비싸다. 
그래서 다른 쪽으로 가는 거예요. 비싸다. 
그 이유는 오라클이 비싸게 하는 이유는 있는 거예요. 
그만큼 옵티마이지 엔진이 정교하고 아주 지능화돼 있다.

참석자 1 
지금까지 포함을 하고 있으니까 그런데 다른 기기들은 거기까지 오려면 아직 한참 멀었다. 
특히 병력 처리 같은 거 하는 거 보면 티베로 쪽 하시는 분들 계세요. 
티베로 쪽 티베로도 경력까지 날려보셨어요. 
하시면 막 나온다. 다 오라클은 경유차에 얼마나 프라이 잘 차 있는 자신감을 가시라 말씀드리고 싶은 거 요 뭐라고 공부하시는 분들께

참석자 1 
이제 능력을 가질 수 있는 기술력을 키워나갈 수 있는 분야니까 이 분 하면 좋겠습니다. 
요즘에 프로피 쪽으로 튜너든 db는 없어서 난리예요 하면 막 겁 먹고 막 다른 데로 막 가버렸거든요. 
인력이 없어서
참석자 1 
서비스가 준비되면서 10시라든지 1시라든지 먹게 굉장 활발하게 많이 들어지고

참석자 1 
비용 문제는 우리 개발자들이 걱정하는 게 아니잖아요. 
그 너들이 그 뭐 할 건데 개발자들이 더 걱정을 뭐라 비싸 그래서 디비를 다른 걸 써 고생한 개발자들이 다 하고 이관하는 과정에서 고생하고 성능이 안 나오고 기능이 아주 그 자들이 노앞에서 그냥 수학도 할 수 있는 것들을 막 보는 거 나 보고 해가면서 막

참석자 1 
하시는 분 직접 하고 아래시에서 자동으로 로드 해주는데 그거를 직접 구현하는 거예요. 
그래서 하더라고요 재작년엔가 마리아 님이 개발한 백신 개발자 와서 세미나를 하더라고요 제가 이제 한번 가봤어요. 
그래서 에 가봤는데 맨 뒤에 앉아가지고 보면서 제가 느끼다가 고생들 했다. 
오라플 나면 그냥 그냥 되는 거를
참석자 1 
개발자들이 직접 그걸 구현을 하는 거예요. 
우리 몰라 지금 하고
참석자 1 
인덱스로 넘어가겠습니다. 인덱스 아까 실습하신 거 질문 없으시죠 인덱스 사위 교육과정 중에 가장 중요한 패턴은 배우 인디스입니다. 
인디스를 빼놓고는 우리가 참 얘기를 거의 죄송한데 지금 시간이 없어서 너무 나중에 볼까요. 
그러면
참석자 1 
중요한 부분이기는 한데 책을 통해서 좀 공부를 해보시죠 제가 케이지를 알려드릴 테니까 공부를 해보시고 책을 보시고 뒤에 안 해 주실 거예요. 
다 질문이 시상 고 페이지로 오늘 이거 끝나고 알려드릴게요 현금 결제하시는 분들 제가 어느 정도 아까 이전 현금 발행해 드릴 테니까 걱정하지 않으셔도 됩니다. 
이미 발행 되는 분도 계시고
참석자 1 
우선 인덱스 구조를 살펴볼 거고요 인덱스가 어떻게 사용하는지에 대한 사용법 확장 기능 그다음에 테이블 에센스를 어떻게 해소할 것이냐 또 이미 어떻게 표현을 할 것이냐 마지막으로 공적으로 인덱스 어떻게 설계할 것이냐 순서대로 다시 살펴보도록 하겠습니다. 
인덱스 구조입니다.
참석자 1 
또 진한 얘기일 수 있는데 인덱스는 결국 세균이에요. 
도서에 보면 맨 위에 세균이 있지 않습니까 맨 앞쪽에는 뭐가 있죠. 
녹차가 있고 맨 위쪽에 세균이 있어요. 
그 세균과 같은 역할을 한다고 생각하시면 돼요 이게 실제로 제 여러분 성능보다 어려운 고 이번에 찾아보니 내가 메모리 세트를 좀 옮겨보겠다. 
그러면 인덱스 세균을 이용해서
참석자 1 
메모리 소트가 572페이지 576페이지에 있구나 그럼 그 페이지를 찾아가 보면 거기에 실제로 메모리 세트에 대한 내용들이 잘 정리가 돼 근데 이런 인덱스에 도움이 많지 않고 만약 메모리 소스를 공부하겠다. 
그러면 어때요 리 페이지부터 잘 넘겨야 되죠 리페이지부터 맨 끝에 있는 분 마지막 페이지까지 다 한 장 더 넘겨가면서 제를 실어서 공급을 해야 됩니다. 
그래서 인덱스 없이 데이터를 검색하려고 하면 처음부터 끝까지 다 스캔을 해야 돼요

참석자 1 
인덱스를 이용하게 되면 법인 스캔이 가능합니다. 
제가 특별히 범인 스캔에다 빨간색을 표현을 했죠. 
굉장히 중요한 겁니다. 범인 스캔 제가 그냥 흔히 인덱스 레이스캔 네이스캔이라는 말을 쓰는데 그레인지라는 말이 뭘 의미해요. 
범위지 않습니까 범위 범위 어디서부터 시작해서 어디까지 일단 멈출지에 대한 범위가 있다는 굉장히 중요한 말이

참석자 1 
그 용어로서 그냥 이 충분한 게 아니고 거기에 굉장히 중요한 요인 원리가 숨어 있어요. 
그 놀라운 원리를 발견하고 책으로 정리하는 저죠 이건 어디 다른 책에서도 이렇게 설명하고 있지 않아요. 
이게 왼쪽은 인덱스예요. 왼쪽은 인덱스고 오른쪽은 테이블입니다.

참석자 1 
보시다시피 인덱스에는 인덱스 키 값이 있고요 그 보시면 여기 인덱스가 이 샐러리 이기태블의 셀 클럼에 대해서 이게 좀 만들 거예요. 
인덱스는 정렬이 돼 있죠 정렬이 돼 있는 거 볼 수 있어요. 
1차적으로 1900부터 5200까지 같이 쭉 정립이 돼 있고 오른쪽에 보면 로이드가 있어요. 
로이드 로이드 제가 설명드렸죠. 테이블 레코드를 찾아가기에 좋을 것이다.

참석자 1 
그래서 인덱스를 스캔을 하면서 이 조건을 만족하는 범위를 스캔을 하면서 3천부터 4천 사이에 데이터를 스캔을 하면서 거기서 얻은 노하이드를 가지고 하나씩 하나씩 찾아갑니다. 
이게 뭐죠 랜덤 마이어죠 랜덤 랜덤마이어 인덱스 에스큐팀은 랜덤 마이어 전쟁이다.

참석자 1 
그때만 내 동안 걸리고 테프를 그냥 그게 그냥 단순한 테프가 아니라니까요. 
만 중면 저것 때문에 성능이 드린다라고 얘기합니다. 
랜덤 아이오엠에서 또 뭐죠 디스켓 읽을 때는 어떤 방식이고요 싱글 불라가요 여러분들 싱글 불라가

참석자 1 
데이터를 처리하는 방식은 랜더 마이어고 그 데이터를 메모리에서 찾아보고 없을 때 디스크에 갈 때 방식은 싱글 블라가

참석자 1 
결국 싱글 블러가 아이오 한다는 얘기는 아이오콜이 발생한다는 얘기고 건건이 프로세스가 잠을 잔다는 얘기 그 그 강조 되 그 얘기 그래서 성률이 늘어지는 거 인덱스 구조입니다. 
인덱스 우리가 우리가 인덱스에 여러 가지가 있는데 일반적으로 우리가 쓰는 인덱스는 비틀 인덱스예요. 
비 아스타 트리 인덱스 그러니까 그 비틀의 트리라는 말이 의미하는 것처럼 인덱스는 나무 모양으로 돼 있어요. 
나무 모양
참석자 1 
나무는 아래쪽에 뿌리가 있고 중간에 가지가 있고 위쪽에 입사기가 있습니다. 
리프가 있죠. 이런 나무를 꺾고 뒤집은 모양 바로 인덱스의 모습입니다. 
뒤집었기 때문에 위쪽에 뿌리가 있고 중간에 가지가 있고 아래쪽에 입사위가 있고 인덱스는 트린 모양으로 돼 있고 그러면 앞에서 말하는 비 비틀이라고 했는데 비는 뭘까요. 
비
참석자 1 
뒤는 밸런스의 의미에요. 그 밸런스가 뭘 의미하는 겁니다. 
밸런스 루트에서부터 리프까지의 거리가 모두 동일하다는 얘기예요. 
어떤 미트 블록을 기준으로 노트를 바라봤을 때 거리가 다 똑같다는 얘기죠 이겠으면 이겠스 30스면 30스 40수 40스 모든 리플라이 다 똑같이 루트와의 거리가 똑같이 30 40스라는

참석자 1 
지금 보시는 그림은 전혀 밸런스 돼 있지 않죠. 
그런 측면에서 보면 그죠 요 리프는 루트랑 굉장히 가깝고 이 리프는 그렇다는 굉장히 멀고 그렇죠 이거는 이제 밸런스가 아닌 겁니다. 
그래서 이게 바로 밸런스죠 제이크 찾느라고 고생했어요. 
보시다시피 리프에서부터 루트까지 거리가 똑같잖아요. 
그게 바로 밸런스입니다. 그래서
참석자 1 
닉스의 실제적인 그림을 그려보면 이렇게 돼있어요. 
위쪽에 루트에서부터 맨 위쪽이 루트고 중간이 브랜치고 맨 아래가 리프입니다. 
보시다시피 똑같이 3겹스인 것을 볼 수가 있어요. 
인디스는 이렇게 만들어요. 개발자분들 중에서 인기스 안 만드는 것도 이길 수 있는데 고객 테이블에 대해서 고분명 칼럼 이름으로 정렬을 한 인디스 많게 롯데 이런 명령을 사용하

참석자 1 
이거는 체계도 없는 내용인데 교육을 하다 보면 많은 분들이 좀 질문하시는 내용 중에 하나예요. 
제가 이제 중간에 시스 보드에다 써서 설명을 하고 있는 게 제가 그제 있습니다. 
이 히스가 어떻게 진화를 하느냐 어떻게 만들어지느냐 그걸 좀 고민하시는 분들이 있을 것 같아서 설명드리겠습니다. 
이쪽에 보시면 고객 테이블이 있어요. 
고객 테이블에는 도지원 강덕승 최고 강철수 김민규 신재영이라는 6명의 고객이 입력된 상태고

참석자 1 
여기다가 인덱스를 만들면 인덱스는 어떤 모습일까요. 
인덱스는 노트 브랜치 립으로 간다고 그랬는데 지금도 그럴까요. 
1코드 6개밖에 없는데 굳이 굳이 루트 브랜치 가실 필요가 있을까요. 
없어요. 이런 모습입니다. 루트이자 브레이치자 리프 역할을 다 하는 거예요. 
혼자서 정면에 두는 거죠. 선블락에다가 데이터 6개를 넣어놓고 보시다시피 왼쪽에 테이블에는 정리는 안 돼 있습니다만

참석자 1 
오른쪽에 인덱스에는 정렬이 돼 있어요. 
정렬이 돼 있으니까 강도성을 찾아간다. 
그러면 강독성이 가리키는 블라이 얘일 거 아니에요. 
그죠 가서 정렬돼 있으니까 거기서 내리에 있는 강도성을 찾는 거고 정철수를 찾겠다. 
그러면 장철수의 아이핀 블록도 같은 블록일 거 아니에요. 
이쪽으로 먼저 가야 되겠죠. 그쪽에 이기스 기준으로 강도성을 찾겠다. 
그러면 강도성이 가르키는
참석자 1 
왼쪽 블록을 찾아가서 거기 어디를 사면 되는 거예요. 
송재현을 찾겠다. 그러면 송재현이 가르키는 블록 결국 같은 블록이겠죠. 
같은 블록 찾아가서 거기서 송재현이 유치하는 찾아가면 되는 거죠. 
됐죠 루트가 곧 브레치자 리크인 거예요. 
이 상태에서 그 상태에서 테이블에 박종호라는 새로운 고객이 들어왔어요.

참석자 1 
그럼 테이블은 정렬을 할 필요가 없기 때문에 아무 블락이나 하나 새로 할당해서 거기다 박정으로 입력을 하면 돼요 그죠 근데 인덱스는 어떻습니까 정렬하는 자료 구조이기 때문에 이 박종호라는 사람은 죽었다. 
깨나도 도지원과 송기원 사이에 들어가야 되는 거예요. 
사이에 들어가야 돼요 근데 보시다시피 미디스플라에 꽉 찼어요. 
공간이 없습니다.
참석자 1 
공간이 없으면 중간에 끼고 들어가 뒤로 가고 나머지들을 뒤로 밀면 되는데 그죠 물론 실제로 밀지는 않겠죠. 
이렇게 서로 레코드에 서로 연결해가지고 중간에 사이에 끼워넣겠죠. 
그렇죠 이거죠. 잘 좀 공부해 보시는 분들은 아실 거예요. 
실제로 나머지 애들 좀 다 밀어내고 중간에 끼어 놓는 게 아니고 데코들끼리 서로 이렇게 연결해가지고 그러니까 박종원을 도지원과 선비 사이에 연결을 딱 시켜버리면 되는 겁니다. 
아무튼 지금은 그렇게 할 수가 없는 게

참석자 1 
인베스 블록이 꽉 찼거든요. 그럼 어떻게 해야 될까요. 
테이블이야 빙글러 판 한다해서 거기다 입력하면 되는데 얘는 죽었다. 
다 저기 들어가야 되기 때문에 새로운 블락을 할당을 하고 그 새로운 블락에다가 절반을 옮겨요. 
옮겨요. 그러면 공간이 확보가 되죠. 
공간이 확보한 상태에서 박동을 하는 고객을 인팩트에서 입력을 하는 겁니다. 
그러면
참석자 1 
물론 이 상태도 이 상태로도 인디스의 역할을 할 수가 있어요. 
정렬이 돼 있기 때문에 그죠 그죠 이 상태로도 등결됐기 때문에 인디스 역할을 하죠. 
근데 어떻게 찾아야 돼요 만약 내가 김민규를 찾겠다. 
그러면 어떻게 해야 돼요 그 잘하고자 알 생각 되었죠. 
중간으로 가서 왼쪽으로 갈까 오른쪽으로 갈까 왼쪽이네요. 
그럼 딱 들어가면 또 중간 딱 식으로 가서 위로 갈까 안 들어 갈까 이런 알고리즘이 있죠. 
그죠
참석자 1 
그런 방식을 찾아 들어가야 돼요 굉장히 비율적입니다. 
한두 건도 굉장히 많은 데이터를 그런 식으로 매번 퍼거니 절반 뚝 잘라서 이쪽 오른쪽이 무슨 알고리즘이죠. 
2분 하세요. 이분 탐색 그런 알고리즘이랍니다. 
그 방식으로 할 수도 있어요. 이런 평면적인 구조를 그대로 유지하면서

참석자 1 
그렇게 처리할 수 있는데 굉장히 비효율적입니다. 
많은 데이터를 처리하는 데 있어서 그래서 뭘 쓰느냐 위쪽에 루트 블록을 하나 할당하는 겁니다. 
루트 블록을 루트 블록 그래서 루트 블라을 통해서 왼쪽으로 갈지 오른쪽으로 갈지를 결정하는 거예요. 
보시는 것처럼 여기까지 이해되시죠 평면적인 구조가 아니라는 얘기죠 이 순서가 계층화돼 있다.

참석자 1 
그다음에 이제 박종환 이 인력이 됐고 그래서 그 데이터를 계속 입력하다 보면 어느 순간에 리트블락이 꽉 차는 순간이 생겨요. 
더 이상 레크로 입력할 수 없는 그 상태에서 홍강표라는 사람 입력을 하면 어떻게 될까요. 
홍강표 또 찾아 들어갈 공간이 없죠. 
그렇죠 근데 아까는 아까보다 다행스러운 거는 아까는 중간으로 뛰어들어가야 되는데 홍광표는 현재 입력된 레코드보다 가장 큰 값이에요. 
그러니까
참석자 1 
아까 말씀드린 게 이게 인덱스 스플릿이거든요. 
제가 용어를 말씀 안 드렸는데 한 블락이 있는 것을 두 개로 이렇게 나누는 것을 스플릿이라고 합니다. 
인덱스 스플릿 인덱스 스플릿을 통해서 두 개의 블록으로 쪼개지는 것을 우리가 이 스프릿이라고 하는데 지금 어때요 형 광수를 입력할 때는 스크릿을 할 필요가 없어요. 
그냥 새로운 블록을 맨 뒤에 할당을 해서 고 안에 입력을 해버리면 돼요 제일 큰 값이니까 그죠 이렇게 이런 식으로 확장을 해나가는 겁니다. 
그러면서 새로운 블락이 하나 추가가 됐으니까

참석자 1 
그 블록을 가리키는 베코드가 루트에 하나가 추가되는 거죠. 
그래서 인덱스 리프 블라이 3개면은 이 루트에도 3개의 레코드가 저장이 되는 겁니다. 
그래서 어떨 때는 이쪽으로 어떨 때는 이쪽으로 어떨 때는 이쪽으로 찾아 내려가게 되는 거죠. 
이정표 역할을 하는 거예요. 이정표 역할을 어떤 블락으로 갈지에 대한 이정표

참석자 1 
그렇게 이제 데이터를 쭉 입력을 해나가다 보면 어느 순간에 얘가

참석자 1 
계속 리트 블록이 추가해 나가다 보면 어느 순간에 어떻게 돼요. 
요 루트 블록이 꽉 찬 꽉 차는 순간이 생기겠죠. 
그죠 꽉 차는 순간이 생길 것이고 이해되세요. 
이 루크 블록은 인덱스 리프 블록 개수만큼의 레트를 관리하는 거예요. 
리크 블록 개수만큼 그러다가 어느 순간이 되면 또 하나의 리플락이 추가되는 순간이 있는데 그때 이 루트볼락에 꽉 차 있으면 더 이상 리플락을 관리할 수 없게 되는 것이죠.

참석자 1 
그러면 그때는 요 루트 블라이 또 확장이 됩니다. 
스플릿이 돼요. 스플릿 에서 제가 두 개가 되는 거예요. 
제가 두 개가 되는 순간 또 뭐가 필요할 거야 위쪽에 또 부모가 필요해지죠 바로 이 모습이 돼버리는 이해가 되십니까 그래서 이것을 만들면 이렇게 확장을 하는 겁니다. 
그니까 애초에 데이터가 확 들어간 상태에서

참석자 1 
딱 이것을 만들면 쫙 정리를 해서 리프 블록을 쫙 만들고 리프 블록을 정리해서 만들고 그 위에 브랜치 만들고 그 위에 노트 만들면 되는 거예요. 
근데 보시는 것처럼 처음에 데이터가 하나도 없는 상태에서 데이터 하나씩 하나씩 입력되는 과정에서 확장되는 모습은 힘들다는 얘기예요. 
스플릿을 통해서 이 늘어나고 늘어나고 늘어나면서 브랜치가 꽉 차고 그럼 또 얘기가 또 스플이 되면서 루스가 생기고 이런 식의

참석자 1 
정비를 해나간다는 거죠. 그렇게 해서 만들어진 게 바로 이 리스가 되는 거죠. 
질문 있으신 분 계실까요.
참석자 1 
굉장히 어려운 내용을 제가 쉽게 잘 설명해서 질문이 없을 줄 알았어요. 
그래서 그럼 도대체 애들이 어떤 의미를 갖느냐

참석자 1 
여기 lmc는 뭐냐면 레프트 모드 차일드예요. 
가장 왼쪽 자식이라는 뜻이죠. 어떤 의미를 갖는 거냐면 여기서 말하는 선은 선보다 큰 데이터 내가 가리키는 얘가 가리키는 얘가 가리키는 이 리스트라고 가면 거기에는 서보다 크거나 같은 데이터가 있다. 
그런 뜻이에요.
참석자 1 
그리고 lmc가 가리키는 이쪽으로 가면 거기는 사업보다 작거나 같은 데이터가 있다. 
그런 뜻이에요. 마찬가지로 여기 지금 강도성이 있고 lmc가 있지 않습니까 이 감각성이 가리키는 이 리플러고 내려가면 거기에는 감각성보다 크게 나 같은 데이터가 있다는 얘기고 lmc가 가리키는 블록으로 가보면 거기에는 강도성보다 작거나 같은 데이터가 있다. 
그런 의미입니다. 범위 값을 의미한다는 얘기 범위 범위

참석자 1 
그래서 여러분들이 제가 앞서도 말씀드렸지만 인덱스도 결국 블록이다. 
블록으로 구성돼 있다. 그래서 블록은 뭐다 액체가 시트라고 생각하면 쉽다 그랬죠 그래서 지금 엑셀로 제가 표현을 해본 겁니다. 
아까 보신 그 그림을 엑셀로 표현하는 거예요. 
그래서 맨 위에 블록을 보면은 루트 블록을 보면 lmc에 있고 서가 있어요. 
그럼 lh가 가르치는 브레치 블락이 있고 서가 가르치는 브레치 블락이 있어요. 
보시는 것처럼 오라클의 오라뿐만 아니라

참석자 1 
루프나 브렌지는 자기 하이 노드의 하이 노드의 블록 주소를 갖고 있어요. 
하이 노드의 블라투스 왼쪽으로 오면 왼쪽으로 오면 nmc부터 강덕성 김소희 고주원 박주원까지 6개가 있는데 각각 별로 나는 이번 리 블록 나는 이번 립 블록 3번 립 블록 맨 마지막 바다면 여섯 번째 립 블락을 가르치는 수 있죠 그렇죠 그래서 그 블록이라는 거 다 시트예요. 
시트
참석자 1 
여기에 박종화 가르키는 시트 6번 디스플레이 되겠죠. 
강도승이 가르키는 리프 2 리프 202에 가보면 우리의 강도성보다 큰 데이터들이 이렇게 인덱스에 저장이 돼 있다라는 것이죠. 
사실은 이 엑셀들이 평면적인 구조로 쫙 있는 거예요. 
데이터를 갖고 있는 건데 그 엑셀 시트들이 서로 가르키고 있는 거죠. 
서로 가르키고 있는 거
참석자 1 
이 가리키는 구조를 이렇게 구조화해 보면 루트 벨치 리프 이렇게 구조가 있다. 
사실 다 평균적인 엑셀 시트들일 뿐인데 걔들이 서로 가르키는 구조가 다른 구 그리고 루스나 브래치는 자기 하위 노뷰의 블라우스를 가르키고 있는데 로아이디는 로아이디는 테이블 레고트 소를 가리키고 있는 아이디

참석자 1 
뒤에 가보면 이제 테이블이 들어서 나오죠 여기에 우투 그래치 리가 있는데 여기 로아가 니프 블라이 있는 로아디가 가르키는 거로 가보면 지금 이 다시 1 2 다시 1로 가보면 이번 플라의 첫 번째 레코드란 뜻이죠. 
거기 가보면 여기 강도성 이 있어요. 
강도성이 있지 않습니까 이로써 2 1이다. 
2시 찾아보면 우리 21 2번 시트의 첫 번째 레코드가 엔터승이 되는

참석자 1 
한국선 여기도 있죠. 4 3면이 있대요 4번 시트 4번 블록의 세 번째 들어가면 여기도 강

참석자 1 
사실 여러분들이 어떤 분들은 5년 경력 어떤 분은 10년 경력 어떤 분 15년 20년 경일 텐데 인덱스를 그동안에 굉장히 많이 써왔을 거예요. 
굉장히 오랜 시간 인덱스를 써왔음에도 불구하고 머릿속에 이런 인덱스 그림이 없는 분들이 되었습니다. 
막연하게 인덱스 스에 대한 어떤 막연한 개념을 가지고 이스를 거 떠올리면서 설계를 하고 구현을 하고 있다는

참석자 1 
근데 그 그림 자체가 잘못돼 있는 거예요. 
그림이 이미 설계를 잘못하고 성능을 떨어뜨리면서 잘못된 설계를 하게 되겠죠. 
결코 어려운 내용이 아니에요. 이게 그렇죠 들여다 보면 상식적인 내용이구나 엑셀에 데이트에서 생각을 해보면 결코 어려운 내용이 아니 질문 있으신 분 상표를 만약에 삭제하면 브랜치에서도 제가

참석자 1 
마플 어디서 삭제합니까 케이블에서 네 케이블에서 케이블에서 삭제하면 마크가 어디죠 각도가 저희 아버지 친구 제가 알고 있는

참석자 1 
승박크 어디 있어요. 지금 4 15 페이지입니다. 
여기 여기 있어요. 3 다 여기 있네요. 
홍금표 다 삭제했어요. 그러면 일부러 삭제가 되겠죠. 
삭제가 되겠죠.
참석자 1 
얘를 지웠다. 그래서 얘를 지울 필요가 있을까요. 
얘는 아까 얘기한 것처럼 범인 값이에요. 
즉 여기 이지형이 있고 이지형이 가리키는 블록 블록으로 내려가 보면 거기에는 이재형보다 크게 나는 데이터 있다라는 의미를 갖고 있다. 
그랬죠 그죠 크가 났단 얘기다 그러면 홍광표가 여기서 테이블에서 홍광표가 지워졌고

참석자 1 
그래서 인덱스에서 홍남표가 첫 번째 레프네요. 
12번 링크 블락에 첫 번째 레프 얘를 지웠어요. 
지웠다고 해서 얘를 또 마찬가지 지우실 필요가 있을까요. 
아니면 설명서를 신사적으로 작성해 주실 필요가 있을까요. 
없죠. 이 홍강표가 가는 12번 블록으로 가면 거기에는 홍강표보다 크거나 같은 데이터가 있다는 사실에 단원이 있어요. 
없어요. 없잖아요.
참석자 1 
굳이 볼 필요가 없는
참석자 1 
테이블과 테이블 레코드랑 인덱스 리스플라가 서로 1 대 1 관계입니다. 
그렇기 때문에 테이블 레프로가 지어지면 인데스 리프 플라가 정확히 지어져야 돼요 하지만 이 리프 플락을 가르키는 위쪽 브레치 또 브랜치를 가리키는 이쪽에 투 얘들은 범인 값을 의미하기 때문에

참석자 1 
굳이 얘가 가리키는 그 블록으로 봤을 때 여기 보세요. 
이게 이지롱이 있죠. 이지롱이 구멍 블록이 있다고 하는데 그거 보러 갔더니 이지롱이 있어요. 
없어요. 없어요. 그죠 했더니 이재용이 있는 게 아니고 이재명이 있죠. 
이재형보다 큰 레프트니까 전혀 논리적으로 문제가 없어요. 
맞습니까 그걸 만약에 값을 딱 일치시키더라고 구현할 수도 있겠죠. 
그러려고 하면 어떻게 해야 돼요 말씀하신 것처럼 홍각도를 짓는 순간

참석자 1 
풍광표만 짓는 게 아니고 그 위쪽으로 찾아가서 거기에 있는 이 풍광표를 풍사도로 바꿔줘야 돼요 불편한 일을 한 번 더 해야 되지 않습니다. 
굳이 그럴 필요가 없는데 맞죠. 그래서 사실은 여기 이제 그 내용이 정리가 돼 있습니다. 
정리해 보죠 브랜치 노드상의 키 값은 하위의 노드가 갖는 값의 범위를 의미한다 이 콜이 아니고 값의 범위를 의미하기 때문에 말씀하신 것처럼 홍력구를 지운다고 하더라도

참석자 1 
굳이 어깨트를 칠 이유가 없는 거예요. 
그대로 도고 하는 거죠. 두 번째 림프 노드 사의 키 값과 테이블 레코드 키 값은 서로 일치한다 얘는 이 콜이에요. 
이 콜 그렇기 때문에 테블 레코드가 지어지면 인디스 레코드가 지어지는 거고 태블 레코드가 업데이트가 되면 인디스 레코드도 그 많은 조치를 해줘야 돼요 리프 누드상의 인피스 레코드와 테블 렉터 나는 일 대 1 관계를 맺잖아 일 대 2

참석자 1 
그렇게 일치하는 것이고 그다음에 림프 노드끼리는 서로 이중 연결 리스트 더블 리키드 리스트로 돼 있습니다. 
이 그림이 표현하고 있죠 그러니까 첫 번째 이스 리플라이 두 번째 링크를 가르치고 두 번째 세 번째 링크를 가리켜요 반대로 위로도 가르킵니다.

참석자 1 
상관이 코라이 두 번째 리프를 가리키고 두 번째가 첫 번째 리프를 가리키고요 그렇기 때문에 인덱스를 좌에서 5로 스캔할 수도 있고 우에서 좌우 스크할 수 있어

참석자 1 
이제 대역의 인덱스 구조를 여러분 이해하셨으니까 문제가 나오겠습니다. 
여기 철스타노 테이블에 에이지 칼럼이 인덱스를 만들었어요. 
이 인디스 비용을 해서 40부터 에이지가 40과 60 사이에 있는 데이터를 찾으려고 합니다. 
그때 인덱스 블록을 어떤 블록들을 어떤 수소로 엑세스하는지를 한번 찾아보세요. 
여기 보면 이렇게 틸트가 있고
참석자 1 
고등어 이골이 있죠. 고등어 이골이 lmc예요. 
lc lc 50보다 작은 데이터는 얘가 아르키는 블록으로 내려가 보면 거기에는 50보다 작은 데이터가 있다고 그런 뜻이고 50부터 909까지는 이쪽에 감이 있다. 
그
참석자 1 
앞서 설명드린 내용이고 여기는 표시하지 않았지만 자기의 하위 노드의 주소 값을 얘들이 갖고 있는 거고요 맨 밑에 리프에는 와인 값이 있습니다. 
태블 리프 여기 보면 더블 리큐 구조로 돼 있어서 좌회적으로 서 좌로 스캔할 수 있다고 그랬고 이런 상태에서 이 조건을 만족하는 에이지가 40과 60 사이인 데이터를 어떻게 찾아가는지 블록 번호 엑셀 사는 블록 번호를 한번 맞춰보세요.

참석자 1 
질문 드릴까요. 지금 리프 노드에서는 테이블 액세스 할 때 로우 아이디를 찍어줘서 그 블록에 몇 번째 그냥 가서 읽으면 되는지를 정확히 찍어주는데 루트나 브랜치에서는 다음 브랜치에 접근할 때 이제 블록만 알려주다 보니까 매번 이제 큰지 작은지를 계속 판단하면서 이렇게 블록을 읽어야 될 것 같은데 혹시 제가

참석자 1 
맞아요. 좀 이따 알려드릴 거예요. 바로 위에서 나오는 게 이제 탐색하는 방법으로 설명드릴까 합니다. 
감사합니다. 지금 그걸 설명드리려고 이제 질문드리는 설명하기 아 기존에 알고 계셨는데 제가 그러니까 5년 10년 20년 개발하신 분들도 개발자분들한테 이거 질문해보면 이걸 모르는 분들이 많아요. 
여러분들 어떤지 보고 싶어서 질문 먼저 드리는 거예요. 
탐색하는 원리를 모른다는 거죠. 인덱스를 도대체 어떻게 탐색해서 데이터를 찾아가는지 그 과정 자체를 모르고 개발하고 설계하고

참석자 1 
이걸 모르고 어떻게 이기서 설명하는지 모르겠어요. 
저는 그래서 여러분은 어떤지 지금 질문 드려보는 거예요. 
판매권 원리를 알아보기에 앞서서 1번인 것 같다. 
1번 한 분 계시고 2번인 것 같다. 
또 한 분 계시고 3번 3번이 좀 많고요 4번 3번과 4번이 좀 비슷한데 4번이 더 많네요. 
4번이 4번을 드신 분들은
참석자 1 
예습을 좀 해오신 분이 아닌가 저는 생각합니다. 
원래 아셨던 게 아니고 제 책에 이름이 있지 않습니까

참석자 1 
그래서 그 답을 알아보기에 앞서서 언제 어떻게 탐색하는지를 보시면 자연스럽게 이 질문에 답이 나올

참석자 1 
우리가 지금 인덱스를 고객 테이블에다가 고객 명의 인덱스를 만들었어요. 
고객명 인덱스를 만들고 고객 테이블에서 고객 명의 이재니 인 고객을 조회를 합니다. 
그럼 어떻게 하냐면 일단은 루트에서 시작합니다. 
항상 루트에서부터 탐색을 시작하는데 내가 찾고자 하는 값보다 크거나 같은 레코드를 만나면 크거나 같은 레코드를 만나면

참석자 1 
바로 직접 메코드가 가리키는 블록을 찾아가요 끝까지 갔는데도 못 찾으면 마지막으로 갑니다. 
보시면 이제를 찾아야 그럼 쭉 스캔을 하는 거죠. 
lh를 읽고 서로 읽어요. 끝까지 갔는데 이제보다 크거나 같은 애거를 못 만났어요. 
그러면 오른쪽으로 가는 거예요. 이 석을 가리키는 블록으로 찢어 내려갑니다. 
그러면
참석자 1 
또 마찬가지로 lmc부터 쭉 스캔을 해요. 
lmc 송재영 이재영 정재우 정재현을 만나는 순간 내가 찾고자 하는 값보다 큰 레코드를 만났어요. 
정재호를 그죠 그러면 정재우를 만났으니까 그 바로 앞에 있는 이재령 이재령이 가르키는 이 블록으로 찾아 내려가는 거 그래 어제부터 쭉 스캔을 해요. 
이재명 이제이를 만난 순간 어떻게요 내가 첫 과정을 거 찾았습니다. 
스캔을 하다가
참석자 1 
이정이를 만난 순간 이를 만난 순간 멈추죠 내가 원하는 그걸  찾아냈습니다. 
그죠 이번에는 강도성을 찾아볼까요. 강도성 강덕승 말씀하신 루트에서 시작을 해요. 
lmc를 지나서 서을 딱 만난 순간 강덕승은 서로다 작아요. 
그죠 강덕승보다 큰 레코드를 찾았습니다.

참석자 1 
그러면 바로 직전 lmc의 it는 왼쪽 블록으로 내려오는 거죠. 
그다음에 lmc를 만났고 강독성을 만났어요. 
내가 강도성을 찾고자 하는데 강도성이 여기 있네요. 
그러면 이 2번 레코드가 밝히는 블록으로 쭉 찾아서 내면 될까요. 
안 될까요. 그리고 거기 강동성이 있어요. 
있기는 있긴 있는데 문제는 강동성이 여기 한 명만 있는 게 아니고 그 앞에도 있거든요.

참석자 1 
그러면 어떻게 돼요. 얘는 찾았는데 얘를 놓치게 되는 거예요. 
그러니까 내가 감수성을 찾는다고 해서 감격성 만났다고 아스하고 이렇게 내려오면 안 되고 바로 직전 레코드가 핀 lc가 가핀 블락으로 찾아 내려가야 됩니다. 
그럼 거기에 감독성이 있는 거야 우리는 사실은 지금 강도성을 찾고 있는데 정확히 표현하면 강덕성으로 시작하는 첫 번째 래퍼를 찾는 거예요. 
그걸 명심하세요. 지금 강덕성을 찾는다는 얘기는 우선은

참석자 1 
강도성으로 시작한 첫 번째 레코드를 찾는 게 숙제라는 얘기죠 그렇기 때문에 강도성을 찾았다고 해서 강도성으로 바로 내려오면 안 되고 바로 직접 내립시 가르키는 첫 번째 립으로 내려가서 스캔을 하면서 거기서 비로서 첫 번째 강도성을 만나게 되는 것이죠. 
그리고 나서 얘가 더블 리키 디스트 구조로 돼 있으니까 얘가 가기 블록으로 찾아서 건너갑니다. 
거기 가보니까 강격생이 실제로 더 있어요. 
없을 수도 있겠죠. 그죠 없을 수도 있겠지만 있어요.

참석자 1 
가능성이 있고 강미지에서 딱 멈추다
참석자 1 
그래서 여러분들이 인덱스를 탐색할 때 이 두 가지를 구분하는 게 되게 중요합니다. 
즉 수직적 탐색과 수평적 탐색을 구분할 줄 아세요. 
이렇게 설명한 책이 없다니까요. 인덱스 스캔을 그냥 보통 다른 키트도 보면 인덱스를 그냥 이렇게 이렇게 긴 자기처럼 그래요 이게 그리고 이게 테이블이 있어요. 
그래서 이것을 스캔하면서 테이블 찾아가는 모습으로 그렇게 표현을 해요.

참석자 1 
그러니까 사람들이 머릿속에는 인덱스는 그냥 특별한 별도의 자료 구조가 있나 보다 그 리스트를 스캔하면서 베터를 삼다보다 하는데 그게 아니라는 얘기죠 인덱스는 저는 인덱스를 항상 삼각형 입니다. 
삼각형으로 루트 브레치 루프를 거치는 이 구조 틀린 모양을 그린다는 얘기 삼각형 제가 굳이 그렇게 그린 이유는 바로 수익적 판세를 강조하기 위해서 그러는 거예요. 
즉 수입체 판세를 중에서 시약점면을 찾는 과정

참석자 1 
수익적 선택이라는 것은 인덱스의 스캔 시작점을 찾는 과정입니다. 
왜냐하면 인덱스가 레이스킨이잖아요. 레인스캔 레이 스캔이라는 얘기는 레이지 범위가 있다는 얘기고 여기가 있다는 얘기는 시약점이 있고 끝점이 있다는 얘기죠 그 시약점을 찾아가는 과정이 수직적 상대인 거예요. 
수적 단체를 통해서 시작점을 찾고 거기서부터 쭉 오른쪽으로 스캔을 하면서 내가 실제로 찾고자 하는 값들을 하나씩

참석자 1 
필터링 하면서 찾게 되는 겁니다. 그래서 수입적 탐색은 우리가 등산할 때 이런 이정표 같은 역할을 합니다. 
마운틴 콘도로 갈지 마운틴 탑으로 갈지 브로이 연구소로 갈지 이런 것들을 이정표를 통해서 하나 잡는 것처럼 수트 컨셉은 바로 갈지 우로 갈지 그것을 결정하는 그런 역할을 해준 겁니다.

참석자 1 
오래전 얘기가 2017년도 얘기인데 저한테 이제 교육을 받으신 분이에요. 
저한테 교육을 받으신 분이 카페에다가 저희 카페에 찾아온 있습니다. 
여러분들 카페에 가면 큰일이네요. 찾아보세요. 
카페 그래서 어떤 분이 카페에다가 큰일이네요라고 딱 제목 올렸어요. 
다들 무슨 큰일인가 아파트를 넘어졌다 싶어서 열어봤겠죠. 
그렇죠 열어봤더니 이제 어떤 내용이 적혀 있냐면 이분은 이제 저한테 교육을 받으신 분이니까 인덱스 원리를 아시는 분이죠.

참석자 1 
그분이 이렇게 이제 인터넷 블로그나 카페를 다니면서 이렇게 피스의 원리를 설명하는 글들을 보다 보니까 이런 내용들이 많이 있다라는 얘기예요. 
아래와 같은 내용의 블로그 글이 다수 작성돼서 많은 사람들에게 공유되고 있더라 무슨 내용인지 딱 보니까 사원 테이블에서 성별 여자 이름 위반서 조회를 하는 거야 성별 여자 이름 위반서 그럼 인덱스를

참석자 1 
성별 플러스 이름으로 만들 수도 있고 이름 플러스 성별로도 만들 수도 있죠. 
그럼 여러분은 어떤 게 좋은 구성 같으세요. 
성별 인덱스 성별 이름 또는 이름 성별 어떻게 구성하는 게 좋을 것 같으세요. 
성별 이름이 좋을 것 같다. 리스 아니면 이런 성격이 전공할까 여러분들 이런 걸 본 적 있지 않으세요.

참석자 1 
그래서 저도 이분이 그렇게 얘기하기를 정말 좋아해봤어요. 
인터넷 지금도 검색해 보면 나와요 인터넷에다가 인덱스 성별 여자 이름 이관순 이렇게 조회해서 딱 해보지 않습니까 그러면 이런 글들이 무수히 많이 쏟아져요. 
어느 한 분이 글을 이렇게 써서 공유하기 시작한 것을 많은 분들이 그걸 보고 다 공유하는 거야 그리고 그렇게 이미지를 배워요. 
무슨 얘기냐면
참석자 1 
선별 이름 이렇게 조회를 하면 인덱스를 선별 이름으로 만들 수도 있고 이름 한글로도 만들 수 있는데 만약에 인덱스를 선별 이름으로 만들게 되면 50명의 사원 중에서 25명이 여자를 찾는다는 얘기죠 그러고 나서 그 여자 이 25명 중에서 그 25명이 검사를 하면 여기 검사라고 표현이 돼 있잖아요. 
25번의 검사를 하면 돼요 검사를 하면서 그 25명이 대해서 이거는 성인지 아닌지를 검사한다는 얘기

참석자 1 
그러니까 25번의 검사 오퍼레이션이 일어난다 반면에 이디스를 이름 플러스 성분을 만들게 되면 50명의 사원 중에 2명의 의원선을 찾는대요 인덱스에서 그리고 그 2명에 대해서 여자야 남자야 검사를 하면 되니까 검사가 두 번이라는 얘기죠 이해되세요. 
그렇게 설명하니까 그럴 듯해 보여요 그러면 성별 이름으로 만들면 25번의 값을 검사하게 되는 것이고

참석자 1 
이름 선글을 만들면 검사를 두 번만 하면 될 것 같고 그럼 어떻게 만들어야 된다는 얘기예요. 
이름 선글로 만들어야 된다는 얘기죠 그게 더 좋은 이라는 얘기죠 솔직히 여러분도 이렇게 공부하셨잖아요. 
솔직히 말씀해 보세요. 수학생 분한테 물어보니까 다들 저도 그렇게 들었어요. 
그렇게 알고 있었어요. 하도 그러시더라고요 이런 글들이 지금도 우중히 많아요. 
한번 조회해 보세요. 다 쉬는 시간에 인덱스 이름 성별 여자 유관수 이런 식으로 조회해 보세요.

참석자 1 
엄청나게 많아요. 제가 이제 그때부터 막 그 글을 찾아다니면서 댓글에다가 우선 이제 우리 카페에다가 이제 똑바로 된 이기스 원리를 설명을 해놓고 잘 못 하겠습니다. 
링크를 다 걸어드렸죠.
참석자 1 
어때요 여러분들 이 말이 맞는 것 같아요. 
수중 맞출게요 그러니까 얘기를 하는 거겠죠. 
그러면 그러니까 이런 분들은 인덱스를 마치 엑셀 필터 기능처럼 생각하는 거예요. 
필터 기능처럼 보시다시피 성별 이름을 딱 이때 이걸 해놓고 필터 기능을 이용해서 여자를 선택합니다. 
그럼 여자인 사업들이 쭉 나오겠죠. 그러면서 그들에 대해서 이광수 인증을 하나씩 보는 거예요.

참석자 1 
엑셀 필터에서 그렇게 하셨습니다. 설마 오라클이 오라클이라고 하는 그 전통과 역사를 자랑하는 기기가 대표 그렇게 찾겠어요. 
엑셀처럼 말도 안 되는 얘기 한번 해볼게요 그래서 인덱스를 고객명 선글로도 만들어 보고 선물 고객명으로도 만들어볼 거예요. 
고객명 선불로 만들었습니다. 그러면 고객명 선불로 만든다는 얘기는

참석자 1 
고객명으로 정렬하고 고객명이 가끔은 성별로 정렬한다는 얘기죠 보시다시피 리프러를 보시면 그렇게 정렬이 돼 있는 걸 볼 수 있습니다. 
고객명을 정렬했고 같은 이재이에 대해서 남자 여자 손으로 이렇게 정렬이 된 걸 볼 수 있습니다. 
브레치도 마찬가지고 루트도 마찬 가지 이 상태에서 고객명 싱글로 만든 상태에서 성별 고객 명을 조사하게 되면 고객명이 앞에니까 이재희 남을 찾게 되겠죠. 
이재희 남
참석자 1 
루트에서 시작해요. 이재이면서 남자보다 큰 데이터를 찾아요. 
쭉 끝까지 갔는데 이재희 남보다 큰 액수를 못 찾았어요. 
그럼 오른쪽으로 가죠. 그죠 오른쪽으로 가서 소스케나다 이재희 나보다 큰 데이터 이남 정재호 왕이죠. 
그죠 정재호 남 정재호 남을 만나면 바로 직전 레코드 가게 되면 이재형 나무이 가르키는 블라로 찾아 내려갑니다. 
거기 내려갔더니 실제로 이제 남자가 있어요. 
이제는 이제는 이제 역 이제 연을 만난 순간 멈추는 거죠. 
몇 불 날 읽었습니까
참석자 1 
루트 블라 렌치 블라 니트 블라 세계 블라 이거죠. 
그죠 이번에는 인덱스를 성별 고객으로 만들었습니다. 
그러면 성별로 먼저 정렬하고 같은 성별일 때 고객형으로 정렬하는 거예요. 
그럼 성별이 알 테니까 남자 의지를 찾겠죠. 
남자 의지 남자 의지 그러면 스캔을 합니다. 
남자 이지 이쪽으로 스캔하면 남체를 만나요.

참석자 1 
남체는 남자 이지보다 크죠 그리고 바로 직전에 그 lmc 가이트는 그러고 생각합니다. 
투스캔을 하다가 남자인지 남자인지 남자 인지 인형을 지나서 남자 정재를 만난 순간 내가 찾는 것보다 크니까 바로 직전에 남자 인재형을 가리켜 줄라고 시작합니다. 
거기에 남자 이재이가 있어요. 남자 이제 남자 이제 남자 장철수를 만나 순간 멈추죠 여자 이제는 여기 있어요. 
여자 이제는
참석자 1 
근데 이제 여기 몇 불러 입었습니까 핸블라 블라 세 블라 어때요 성능이 달라요 같아요. 
컸죠 성능은 아이오라고 그랬어요. 아이오 개수에 의해서 성능이 결정됐다고 했는데 고객명 성별로 해도 세 블라 성별 고객명으로 해도 세 불라 성민이 차이가 날 이유가 없는 거죠. 
똑같은 거예요. 성별이 악보든 고객 명의 악보든

참석자 1 
이런 얘기를 하면 또 많이 질문하시는 분들이 이상하다 이 클럽 데이터 분포 선거의 데이터 분포하고 고객님의 데이터 분포가 다르잖아요. 
그죠 그래서 그거에 따라서 순서가 성능이 영향이 있다고 하는데 저분 인상이 똑같다고 얘기하네 제가 지금 똑같다고 얘기하는 것은 둘 다 이 코를 때 얘기하는 거예요. 
성별도 인클로 조회하고 고객 명도 인클로 조회할 때 얘기하는 겁니다 만약에

참석자 1 
둘 다 이 꼴이 아니고 둘 중에 하나가 비핀이거나 둘 중 하나 라이크이거나 두동이거나 이러면 또 얘기가 달라지는 거예요. 
그 원리는 이제 저희가 다음 주에 배우게 될 적어도 둘 다 이 콜이고 둘 다 이렇게 선두 칼럼이면 어느 것이 앞으로든 성돌이 앞으로든 이름이 앞으로든 성능에 전혀 차이가 큰 차이가 없다는 얘기다

참석자 1 
그래서 인덱스 스캔 시작점에 주목해야 돼요 이제 시작 시점에 왜냐하면 아까 그렇게 설명하는 분들은 어떻게 생각하는 거냐면 우리가 성별 남자 고객 이름이 찾을 때 남자를 먼저 찾는다고 생각하는 거죠. 
인덱스가 성별 기계니까 성별 고객명이니까 남자를 먼저 찾고 그 남자 중에서 이지를 찾는다고 생각하는 거예요. 
그러니까 남자가 어디부터 어디까지 해요. 
남자가 여기서부터 여기까지죠 그죠 그래서 이 넓은 건물을 스캔을 하면서

참석자 1 
이제 찬한다고 생각하시 하니까 그런 설명이 나오는 거예요. 
근데 그렇지가 않다는 거죠. 왜 스처 컨셉을 통해서 남자는 여기부터 여기까지 있지만 우리는 남자를 찾는 게 아니고 남자 이재희인 첫 번째 랩 찾는 거거든요. 
숫자 상태가 그러니까 여기가 아니라 이쪽으로 바로 찾아 내려가거든요. 
인덱스 스킬의 시작점에 주목하라는 얘기

참석자 1 
제가 아까 말씀드렸지만 이는 레인스킨을 하는 것이고 그 레인지의 의미는 범위를 의미한다 시작점이 있고 끝점이 있는데 그 시작점을 찾는 것이 수익적 탐색이다라고 얘기를 했지 않습니까 남자 여자를 찾아서 내려오는 거지 남자를 찾는 게 아니라는 얘기

참석자 1 
아까 이런 식으로 설명한 이제 인터넷 쇼트를 봤는데 뒤늦게 아는 사실은 이게 어떤 유명한 체계에서 설명을 sk 관련해서 되게 잘 팔리는 베스텔러 중에 하나입니다. 
그 책에서 이렇게 설명하고 있더라고 그러니까 누군가가 그 책을 보고 그거를 인터넷에 블로그를 하는 거예요. 
그러면 그 블로그가 여기서 다 보게 되면서 너도 나도 인덱스 구조를 이렇게 이해하고 있다.

참석자 1 
찾아보세요. 지 굉장히 유명하고 잘 나가는 분이 있을지

참석자 1 
그래서 그런 식으로 인덱스 수익적 탐색을 통해서 시작점을 찾고 습관적 탐색을 하면서 실제 테이블 레코드로 찾아간다. 
그 과정에서 뭘 사용한다 이 로이드를 사용한다는 얘기죠 로이드는 여기도 나와 있지만 테이블 레코드를 찾아가기 위해 필요한 구조 정보입니다. 
크게 두 가지 포맷이 있는데
참석자 1 
제안 로이드 포맷에서는 블록 코너 파일 코너 블록 코너 로아이디 이렇게 정보를 갖고 있고 확장한 로아이디 포맷에서는 하나 더 해져서 오지트 번을

참석자 1 
중요하지 않아요. 여러분들이 굳이 와이드 포맨이 두 가지 있다는 걸 알 필요도 없고 과거에는 위에 거 최근에 아래로 쓰는 게 아니고 과거에는 위에 것만 썼는데 지금 둘 다 쓰고 있는 거예요. 
우리의 그 타입에 따라서 어떤 경우에는 위에 걸 쓰고 어떤 경우에는 아래 걸 쓰고 있는 거죠. 
중요한 거는 여기 보신 것처럼 파일 번호 블록 번호 네 블록 아는 몇 번째 레고트냐 그 정보를 담고 있는 거예요. 
그전에 특별히 블록 번호랑 빨 번호랑 블록 번호를 통해서 뭐라고 한다고 했죠.

참석자 1 
dba 데이터 블랙 어드레스 그래서 로아이디에서 파일 번호랑 블락 번호를 딱 잘라서 쓰면 그것이 또 dba가 되는 거죠. 
그것을 통해서 메모리에 데이터 버프 게시해서 내가 입고자 하는 블러을 찾아간다. 
그랬죠
참석자 1 
아이는 그렇습니다. 아이는 태블릿 사용 해 주시요 그럼 아까 그 질문에 답을 해볼까요. 
몇 번이 답이에요. 내가 찾고자 하는 게 40과 60 사이에 있는 거 그죠 그죠 그럼 어떻게 찾아요. 
데이터를 그냥 뭐 공모한 게 40과 60을 고기를 찾는 게 아니고 뭘 찾으면 될까요. 
있었던 수식 상태 관련해서 쓰는 조건들 수직적 탐색 과정에서 쓰는 조건들

참석자 1 
40 엔드 60이 아니라는 얘기예요. 
뭘까요. 40도가 큰 첫 번째 레터를 찾는 거예요. 
40도가 큰 첫 번째 레 그죠
참석자 1 
그래서 여기서 보면은 얘는 50가 99니까 50보다 큰 값이 밑으로 가면 안 되겠죠. 
그렇죠 내가 99자 하는 것은 40을 찾는 거거든요. 
40을 40을 찾으려고 그러면 얘가 아는 걸로 봐야 되겠죠. 
첫 번째 봐요 고 스캔을 하다가 맨 마지막이 되겠네요. 
30 50 첫 번째는 20보다 4가 두 번째는 209가 30이다. 
30가 60 50이다. 그러니까 내가 찾고자 하는 것은 40이니까 요 요거 30 50이라면은 이 블라우 세라가

참석자 1 
쭉 스캔을 하다가 중간에 40을 만났을 겁니다. 
40 만났을 것이고 포스터 스캔을 시작으로 해서 7번을 가고 8번까지 갈까요. 
안 갈까요. 7번에 웬 마인 레거가 60이고 8번 60이래요 그렇다고 하더라도 8번은 안 갈 순 없죠. 
8번을 가야 비로소 60 60보다 작고 나는 그 이상 더 이상 없구나라는 것을 알 수 있는 거잖아요. 
그래서 8번까지 가봐야
참석자 1 
미리 알 수 있죠 우리는 딱 보니까 아시겠지만 sk 엔지는 혈은 자까지 읽어봐야 알 수 있는 그래서 답은 1 2 6 7 8 4번이 되겠어

참석자 1 
여기까지 하고 쉬겠습니다. 40분인데요. 
제 시경으로 제시 전체 시계로 50분까지 전체 시계로 사이 5개네요. 
55분에 시작해서
